"""Vulnerability analysis tools integration"""

import subprocess
import json
import os
from typing import Dict, Any, Optional
from src.utils.kali_tools import KaliToolsManager

class VulnerabilityAnalysis:
    """Vulnerability analysis tools"""
    
    def __init__(self):
        """Initialize vulnerability analysis tools"""
        self.kali_tools = KaliToolsManager()
        self._check_required_tools()
        
    def _check_required_tools(self):
        """Check required tools"""
        required_tools = ['nmap', 'metasploit', 'sqlmap']
        missing_tools = []
        
        for tool in required_tools:
            if not self.kali_tools.check_tool(tool):
                missing_tools.append(tool)
                
        if missing_tools:
            print(f"[yellow]Missing required tools for vulnerability analysis: {', '.join(missing_tools)}[/yellow]")
            print("[yellow]Some functionality may be limited.[/yellow]")
            print("[yellow]Run the tool installer from the main menu to install missing tools.[/yellow]")
            
    def run_vuln_scan(self, target: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """Run vulnerability scan using nmap scripts"""
        if not self.kali_tools.check_tool('nmap'):
            return {'error': 'Nmap is not installed. Please install it first.'}
            
        try:
            # Default scan parameters for vulnerability detection
            scan_params = {
                'vuln': '--script vuln',  # Run vulnerability detection scripts
                'version': '-sV',         # Version detection
                'aggressive': '-A',       # Aggressive scan
                'timing': '-T4'          # Timing template (0-5)
            }
            
            # Update with custom parameters if provided
            if params:
                scan_params.update(params)
                
            # Build nmap command
            cmd = ['nmap']
            for param in scan_params.values():
                cmd.extend(param.split())
            cmd.append(target)
            
            # Run nmap scan
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                return {'error': f'Vulnerability scan failed: {result.stderr}'}
                
            return {
                'output': result.stdout,
                'command': ' '.join(cmd)
            }
            
        except Exception as e:
            return {'error': f'Error running vulnerability scan: {str(e)}'}
            
    def run_sqlmap(self, target: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """Run SQLMap for SQL injection testing"""
        if not self.kali_tools.check_tool('sqlmap'):
            return {'error': 'SQLMap is not installed. Please install it first.'}
            
        try:
            # Default SQLMap parameters
            sqlmap_params = {
                'batch': '--batch',           # Non-interactive mode
                'random-agent': '--random-agent',  # Use random User-Agent
                'risk': '--risk=2',           # Risk level
                'level': '--level=2'          # Level of tests
            }
            
            # Update with custom parameters if provided
            if params:
                sqlmap_params.update(params)
                
            # Build sqlmap command
            cmd = ['sqlmap', '-u', target]
            for param in sqlmap_params.values():
                cmd.extend(param.split())
                
            # Run sqlmap
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                return {'error': f'SQLMap scan failed: {result.stderr}'}
                
            return {
                'output': result.stdout,
                'command': ' '.join(cmd)
            }
            
        except Exception as e:
            return {'error': f'Error running SQLMap: {str(e)}'}
            
    def run_metasploit(self, target: str, exploit: str = None) -> Dict[str, Any]:
        """Run Metasploit Framework"""
        if not self.kali_tools.check_tool('metasploit'):
            return {'error': 'Metasploit is not installed. Please install it first.'}
            
        try:
            # Create resource script
            script_content = f"""
use auxiliary/scanner/portscan/tcp
set RHOSTS {target}
run
"""
            if exploit:
                script_content += f"""
use {exploit}
set RHOSTS {target}
show options
"""
            
            # Save resource script
            script_path = os.path.join(os.getcwd(), 'msf_script.rc')
            with open(script_path, 'w') as f:
                f.write(script_content)
                
            # Run metasploit with resource script
            cmd = ['msfconsole', '-q', '-r', script_path]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            # Clean up resource script
            os.remove(script_path)
            
            if result.returncode != 0:
                return {'error': f'Metasploit scan failed: {result.stderr}'}
                
            return {
                'output': result.stdout,
                'command': ' '.join(cmd)
            }
            
        except Exception as e:
            return {'error': f'Error running Metasploit: {str(e)}'}
